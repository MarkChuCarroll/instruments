
let inch_mm = 25.4
let one_sixteenth_inch = 1.0 / 16.0 * inch_mm
let one_eighth_inch = 1.0 / 8.0 * inch_mm
let one_quarter_inch = one_eighth_inch * 2.0
let one_half_inch = one_eighth_inch * 4.0

// Body sizing. The body is roughly teardrop shaped,
// formed from two cylinders. The smaller cylinder is
// 2/5ths the radius of the larger.
let body_large_cylinder_radius = 140.0
let body_thickness = 60.0


// Neck sizing.
let trussrod_length = 362.0 // aka around 14 inches.
let scale_length = 18.0 * inch_mm
let trussrod_width = 6.0 // approx 1/4 inch
let trussrod_depth = 11.6 // approx 1/2 inch
// Total body size is approximately 28 centimeters, or 11 inches.
let bridge_to_neck = 4.0 * inch_mm
let neck_length = scale_length - bridge_to_neck
let neck_width = 40.0


// General utility function that divides a solid in half
// along the y axis.
fun half(shape: Solid): Solid {
   let bounds = shape->bounds()
   let xsize = bounds->max()->x() - bounds->min()->x()
   let ysize = bounds->max()->y() - bounds->min()->y()
   let zsize = bounds->max()->z() - bounds->min()->z()


   let cut = cuboid(xsize, ysize, zsize)->move(0.0, ysize/2.0, 0.0)
   shape - cut
}

// Create a flat octagon with the given radius at the points.
fun oct(diam: Float): Polygon {
    let sqrt2 = 2.0 ^ (0.5)
    let r = diam / 2.0
    let rsqrt = r / sqrt2
    polygon([
        v3(-rsqrt, rsqrt, 0.0),
        v3(-r, 0.0, 0.0),
        v3(-rsqrt, -rsqrt,0.0),
        v3(0.0, -r, 0.0),
        v3(rsqrt, -rsqrt, 0.0),
        v3(r, 0.0, 0.0),
        v3(rsqrt, rsqrt, 0.0),
        v3(0.0, r, 0.0)])
}

fun wedge(x: Float, y: Float, thickness: Float): Solid {
    let triangle = polygon([v3(0.0, 0.0, 0.0), v3(x, 0.0, 0.0),  v3(x,  y, 0.0)])
    triangle->extrude(v3(0.0, 0.0, thickness))
}

fun body(width: Float, thickness: Float): Solid {
    fun base_shape(width: Float, thickness: Float): Solid {
        (cylinder(thickness, width, width * 3.0 / 4.0)->scale(1.3, 1.0, 1.0) +
            cylinder(thickness, width/2.0, width/2.0)->move(width, 0.0, 0.0))->hull()
    }

    fun sound_hole(): Solid {
         cylinder(thickness, width/5.0, width/5.0)->scale(1.5, 1.0, 1.0)->move(width/3.0, -width/2.0 , -thickness/2.0)
    }

    fun bracing(brace_length: Float, brace_width: Float, brace_height: Float): Solid {
        let brace_slot = cuboid(brace_length, brace_width, brace_height)
        let wrapper = brace_slot->scale(1.0, 1.5, 1.5)

        let hb_slice = rect(brace_width, width*0.8, 1 == 1)
        let horiz_half = hb_slice->extrude(v3(0.0, 0.0, 1.0), brace_height)
        let horiz = horiz_half + horiz_half->mirror(v3(0.0, 0.0, 0.0), v3(0.0, 1.0, 0.0))


        wrapper + horiz->move(-20.0, 0.0, -10.0) - brace_slot
   }

   let shape = base_shape(width, thickness)
   let compound = shape + shape->scale(0.9, 0.9, 1.0)->move(0.0, 0.0, -thickness*0.1)
   let inner = compound->scale(0.9, 0.9, 0.9)
   let outer = compound->hull()
   outer - inner - sound_hole() + bracing(180.0, 3.5, 10.0)->move(20.0, 0.0, 5.0)
}


fun neck(scale: Float, offset: Float, width: Float): Solid {
    // The shape of the headstock is two overlapping octagons, plus a rectangular
    // extension to move the headstock away from the neck, plus a cylinder
    // where the headstock meets the neck.
    fun headstock(width: Float, thickness: Float): Solid {
        let o = oct(width*0.8)->extrude(v3(0.0, 0.0, thickness))
        let octagons = o + o->move(width * 0.70, 0.0, 0.0)
        let ext = cuboid(width, width /2.0, thickness * 0.8)
//        let cyl = cylinder(width/2.0, width/12.0, width/12.0)->rotate(90.0, 0.0, 90.0)->move(-width, 0.0, width/24.0 + 2.0)
        let w = half(cylinder(width/4.0, width/4.0, width/4.0))->scale(1.0, 0.8, 1.0)->rotate(90.0, 90.0, 180.0)->move(-80.0, 0.0, 10.0)
        //wedge(width, width/8.0, width/2.0)->rotate(-90.0, 0.0, 190.0)->move(0.0, width/4.0, 0.0)
        octagons->move(-width/2.5, 0.0, 0.0) + (ext->move(-width/2.0, 0.0, thickness/2.0) + w)->hull()

    }


    fun heel(radius: Float, length: Float, thickness: Float): Solid {
        let shape: Solid = cylinder(1.0, radius, radius)->move(-radius, 0.0, 0.0) + cuboid(radius * 2.0, radius*2.0, 1.0)
        let offset = length / 4.0
        let result = (shape->scale(2.0, 1.5, 1.0)->move(-offset, 0.0, thickness) + shape)->hull()
        result->rotate(90.0, 0.0, -90.0)
    }


    fun trussrod_cutout(length: Float): Solid {
        let main_slot = cuboid(length*1.2, trussrod_depth + 1.0, trussrod_width)
        main_slot->rotate(90.0, 100.0, -90.0)
    }

     let length = scale - offset
     let main =  half(cylinder(length, width/2.0, width/2.0)->scale(1.0, 0.8, 1.0))
     let head =  headstock(width*2.0, width/3.0)->rotate(70.0, 0.0, 90.0)->move(0.0, -width + 2.0, length/2.0 + width * 1.8)
     let tail = heel(width/3.0, 50.0, 54.5)
     main + head + tail->move(0.0, -55.0, -length/2.0) - trussrod_cutout(length)->move(0.0, -trussrod_depth / 2.0, 50.0)
}



produce("body") {
   body(body_large_cylinder_radius, body_thickness)
}



produce("neck") {
  neck(scale_length, bridge_to_neck, neck_width)

  wedge(10.0, 20.0, 30.0)->move(100.0, 100.0, 100.0)
}
