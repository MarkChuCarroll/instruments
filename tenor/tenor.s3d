 // TODO: fix local functions
let inch_mm = 25.4

fun half(shape: Solid): Solid {
   let bounds = shape->bounds()
   let xsize = bounds->max()->x() - bounds->min()->x()
   let ysize = bounds->max()->y() - bounds->min()->y()
   let zsize = bounds->max()->z() - bounds->min()->z()


   let cut = cuboid(xsize, ysize, zsize)->move(0.0, ysize/2.0, 0.0)
   shape - cut
}


fun body(length: Float, thickness: Float): Solid {
    fun base_shape(length: Float, thickness: Float): Solid {
        (cylinder(thickness, length, length * 3.0 / 4.0)->scale(1.3, 1.0, 1.0) +
            cylinder(thickness, length/2.0, length/2.0)->move(length, 0.0, 0.0))->hull()
    }

    fun sound_hole(): Solid {
         cylinder(thickness, length/5.0, length/5.0)->scale(1.5, 1.0, 1.0)->move(length/3.0, -length/2.0 , -thickness/2.0)
    }

    fun bracing(brace_length: Float, brace_width: Float, brace_height: Float): Solid {
        let brace_slot = cuboid(brace_length, brace_width, brace_height)
        let wrapper = brace_slot->scale(1.0, 1.5, 1.5)

        let hb_slice = rect(brace_width, length*0.8, 1 == 1)
        let horiz_half = hb_slice->extrude(v3(0.0, 0.0, 1.0), brace_height)
        let horiz = horiz_half + horiz_half->mirror(v3(0.0, 0.0, 0.0), v3(0.0, 1.0, 0.0))


        wrapper + horiz->move(-20.0, 0.0, -10.0) - brace_slot
   }
   let shape = base_shape(length, thickness)
   let compound = shape + shape->scale(0.9, 0.9, 1.0)->move(0.0, 0.0, -thickness*0.1)
   let inner = compound->scale(0.9, 0.9, 0.9)
   let outer = compound->hull()
   outer - inner - sound_hole() + bracing(180.0, 3.5, 10.0)->move(20.0, 0.0, 5.0)
}


fun neck(scale: Float, offset: Float, width: Float): Solid {
    fun oct(diam: Float): Polygon {
        let sqrt2 = 2.0 ^ (0.5)
        let r = diam / 2.0
        let rsqrt = r / sqrt2
        //   ul,
        polygon([v3(-rsqrt, rsqrt, 0.0),  v3(-r, 0.0, 0.0), v3(-rsqrt, -rsqrt, 0.0), v3(0.0, -r, 0.0),
        v3(rsqrt, -rsqrt, 0.0), v3(r, 0.0, 0.0),  v3(rsqrt, rsqrt, 0.0),  v3(0.0, r, 0.0)])
    }


    fun headstock(width: Float, thickness: Float): Solid {
        let o = oct(width*0.8)->extrude(v3(0.0, 0.0, thickness))
        let ext = cuboid(width, width /2.0, thickness * 0.8)
        let cyl = cylinder(width/2.0, width/12.0, width/12.0)->rotate(90.0, 0.0, 90.0)->move(-width, 0.0, width/24.0 + 2.0)
        let r = (o + o->move(width * 0.70, 0.0, 0.0))->move(-width/2.5, 0.0, 0.0) + ext->move(-width/2.0, 0.0, thickness/2.0) + cyl
        r
    }


    fun heel(radius: Float, length: Float, thickness: Float): Solid {
        let shape: Solid = cylinder(1.0, radius, radius)->move(-radius, 0.0, 0.0) + cuboid(radius * 2.0, radius*2.0, 1.0)
        let offset = length /4.0
        let result = (shape->scale(2.0, 1.5, 1.0)->move(-offset, 0.0, thickness) + shape)->hull()
        result->rotate(90.0, 0.0, -90.0)
    }


     let length = scale - offset
     let main =  half(cylinder(length, width/2.0, width/2.0))->scale(1.0, 0.7, 1.0)
     let head =  headstock(width*2.0, width/3.0)->rotate(70.0, 0.0, 90.0)->move(0.0, -width, length/2.0 + width * 1.8)
     let tail = heel(width/3.0, 50.0, 55.0)
     main + head + tail->move(0.0, -55.0, -length/2.0)
}



produce("body") {
   body(100.0, 50.0)
}



produce("neck") {
  let width = 35.0
  neck(24.0 * inch_mm, width, width)

}
