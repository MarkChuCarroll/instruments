//
// A short-scale tenor guitar for 3d printing.
//

import "constants.s3d" as constants
import "shapes.s3d" as shapes


// Constants for the proportions of the guitar.

// Body:
//  - the body is roughly teardrop shaped, formed from two cylinders.
//    The smaller cylinder is 2/5ths the radius of the larger.
let body_large_cylinder_radius = 100.0
let body_thickness = 60.0
// Total body size is approximately 28 centimeters, or 11 inches.
// The bridge sits 4 inches down the body from the end of the neck.
let bridge_to_neck = 4.0 * constants::inch_mm

// Neck sizing.
let scale_length = 18.0 * constants::inch_mm
let trussrod_length = 362.0 // aka around 14 inches.
let trussrod_width = 6.0 // approx 1/4 inch
let trussrod_depth = 11.6 // approx 1/2 inch
let neck_length = scale_length - bridge_to_neck
let neck_width = 45.0

// General utility function that divides a solid in half
// along the y axis. This doesn't quite work yet.
fun half(shape: Solid): Solid {
   let bounds = shape->bounds()
   let xsize = bounds->high()->x() - bounds->low()->x()
   let ysize = bounds->high()->y() - bounds->low()->y()
   let zsize = bounds->high()->z() - bounds->low()->z()
   let cut = cuboid(xsize, ysize, zsize)->move(-xsize/2.0, 0.0, -zsize/2.0)
   shape - cut
}


// The body of the guitar.
// The main body shape is formed from the hull of two cylinders.
fun body(width: Float, thickness: Float): Solid {
    fun base_shape(width: Float, thickness: Float): Solid {
        (cylinder(thickness, width, width * 3.0 / 4.0)->scale(1.3, 1.0, 1.0) +
            cylinder(thickness, width/2.0, width/2.0)->move(width, 0.0, 0.0))->hull()
    }

    fun bracing(brace_length: Float, brace_width: Float, brace_height: Float): Solid {
        // The top has a brace running the same direction as the neck (the long brace),
        // and a perpendicular brace running across the body (the short brace).
        // The short brace has a slot where you can insert a carbon  fiber rod
        // to reinforce the body for metal strings; the brace can be left out if
        // you're using nylon strings.
        // Each of the braces is rectangular for most of the length, ending
        // with triangles that blend into the top at the edges.
        let long_brace_slot = cuboid(brace_length, brace_width, brace_height)
        let long_brace = long_brace_slot->scale(1.0, 1.5, 1.5) - long_brace_slot
        let long_brace_cap = shapes::wedge(brace_height*3.0, brace_height * 1.5, brace_width * 1.5)->rotate(-90.0, 180.0, 0.0)
        let left_cap = long_brace_cap->move(110.0, - brace_width/2.0 - 1.0, -brace_height*0.75)
        let right_cap = long_brace_cap->rotate(0.0, 0.0, 180.0)->move(-110.0, brace_width/2.0 + 1.0, -brace_height*0.75)
        let capped_long_brace = (long_brace + left_cap + right_cap)->move(0.0, 0.0, -30.0)
        let short_brace_block = cuboid(brace_width, width, brace_height)
        let short_brace_cap = shapes::wedge(brace_height, 2.0 * brace_height, brace_width)
        let short_brace = short_brace_block +
            short_brace_cap->rotate(-90.0, 90.0, -90.0)->move(-brace_width/2.0, width/2.0, brace_height/2.0) +
            short_brace_cap->rotate(-90.0, 90.0, 90.0)->move(brace_width/2.0, -width/2.0, brace_height/2.0)
        capped_long_brace + short_brace->move(0.0, 0.0, -thickness/2.0 - 3.0)
    }

    fun tailpiece(width: Float, length: Float, thickness: Float): Solid {
       let pin = cylinder(thickness*2.0, 1.0, 1.0)
       let big = cuboid(1.0, width, thickness)
       let smaller = cuboid(1.0, width*0.8, thickness)->move(-length, 0.0, 0.0)
       let prism = (big + smaller)->hull()
            - pin->move(-length*0.85, width/2.0 * 0.2, 0.0)
            - pin->move(-length*0.85, width/2.0 * 0.6, 0.0)
            - pin->move(-length*0.85, -width/2.0 * 0.2, 0.0)
            - pin->move(-length*0.85, -width/2.0 * 0.6, 0.0)
            - pin->move(-length, width/2.0 * 0.2, 0.0)
            - pin->move(-length, width/2.0 * 0.6, 0.0)
            - pin->move(-length, -width/2.0 * 0.2, 0.0)
            - pin->move(-length, -width/2.0 * 0.6, 0.0)
    }

    // For attaching the neck, we'll be adding a screwblock. This generates the
    // screw holes and nut-slots in the screwblock for the body.
    fun nutslot(outer_size: Float, thickness: Float): Solid {
        shapes::hexagon(constants::m4_caphead_radius, 8.0)->rotate(0.0, 90.0, 0.0) + cylinder(200.0, constants::m4_radius, constants::m4_radius)->rotate(0.0, 90.0, 0.0)->move(200.0, 0.0, 0.0)
    }

    let shape = base_shape(width, thickness)
    let compound = shape + shape->scale(0.9, 0.9, 1.0)->move(0.0, 0.0, -thickness * 0.1)
    let outer = compound->hull()
    let inner = outer->scale(0.9, 0.9, 0.9)->move(0.0, 0.0, -thickness*0.1)
    let sound_hole: Solid =
         cylinder(thickness, width/5.0, width/5.0)
             ->scale(1.5, 1, 1.0)
             ->move(width/3.0, -width/2.0 , -thickness/2.0)
    let screwblock = cuboid(20.0, 85.0, 64.0)
    outer - inner - sound_hole + bracing(160.0, 3.5, 10.0)->move(-5.0, 0.0, -28.0)
         + tailpiece(neck_width, 25.0, 10.0)->move(-width - 10.0, 0.0, -50.0)
         + screwblock->move(105.0, 0.0, -32.0)
         - nutslot(4.0, 2.0)->move(90.0, 0.0, -20.0)
         - nutslot(4.0, 2.0)->move(90.0, 0.0, -40.0)
}

// the neck of the guitar.
fun neck(scale: Float, bridge_to_neck: Float, width: Float): Solid {
    // The shape of the headstock is two overlapping octagons, plus a rectangular
    // extension to move the headstock away from the neck, plus a cylinder
    // to smooth the joint from the headstock to the neck.

    fun make_headstock(width: Float, thickness: Float): Solid {
        let tuning_peg_radius = 5.0
        let o = shapes::oct(width*0.8, thickness)
        let octagons = o + o->move(width * 0.70, 0.0, 0.0)
        let ext = cuboid(width, width /2.0, thickness * 0.8)
        let cylindrical_wedge = half(cylinder(width/4.0, width/4.0, width/4.0))->scale(0.6, 1.0, 1.0)->rotate(0.0, 90.0, 180.0)->move(-80.0, 0.0, 10.0)
        let tuning_peg_hole = cylinder(30.0, tuning_peg_radius)->up(20.0)

        octagons->move(-width/2.5, 0.0, 0.0)
            + (ext->move(-width/2.0, 0.0, thickness/2.0) + cylindrical_wedge)->hull()
            - tuning_peg_hole->right(width*0.25)->forward(width*0.15)
            - tuning_peg_hole->right(width*0.25)->forward(-width*0.15)
            - tuning_peg_hole->right(-width*0.4)->forward(width*0.15)
            - tuning_peg_hole->right(-width*0.4)->forward(-width*0.15)
            + shapes::mark(width/6.0, thickness/4.0)->move(0.0, 0.0, 15.0)->rotate(0.0, 0.0, -90.0)
    }


    fun make_heel(radius: Float, length: Float, thickness: Float): Solid {
        let screwhole = (cylinder(100.0, constants::m4_radius) + cylinder(20.0, constants::m4_caphead_radius))->rotx(-90)
        let shape: Solid = cylinder(1.0, radius, radius)->move(-radius, 0.0, 0.0) +
            cuboid(radius * 2.0, radius*2.0, 1.0)
        let bridge_to_neck = length / 4.0
        let result = (shape->scale(2.0, 1.5, 1.0)->move(-bridge_to_neck, 0.0, thickness) + shape)->hull()->rotate(90.0, 0.0, -90.0)
        result - screwhole->move(-10.0, 40.0, 0.0) -  screwhole->move(-30.0, 60.0, 0.0)
    }

    fun trussrod_cutout(length: Float): Solid {
        let main_slot = cuboid(length*1.2, trussrod_depth + 1.0, trussrod_width)->move(length/2.0 * 1.2, trussrod_depth/2.0, -trussrod_width)
        main_slot->rotate(0.0, 90.0, -90.0)
    }

     let length = scale - bridge_to_neck
     let main =  half(cylinder(length + 20, width/2.0, width/2.0)->scale(0.8, 1.0, 1.0))
     let head =  make_headstock(width*2.0, width/3.0)
         ->rotate(0.0, -70.0, 0.0)
         ->move(43.0, 0.0, length/4.0 -10)
         //length/2.0 + width * 1.8)
     let heel = make_heel(width/3.0, 50.0, 70.0)
     main + head + heel->rotate(90.0, 0.0, 0.0)->move(70.0, 0.0, -(length+20.0))
          - trussrod_cutout(length)->move(0.0, -trussrod_depth / 2.0, 50.0)
}

let notch = triangle(3.0, 4.0)->extrude(100.0, 4)->rotz(90.0)->roty(90.0)->down(2.5)

fun fretboard(length: Float, width: Float): Solid {
    fun fret_position(scale: Float, fret: Float): Float {
        let c = 2.0^(1.0/12.0)
        scale / c^fret
    }

    fun fret_distance(scale: Float, fret: Float): Float {
        fret_position(scale, fret-1) - fret_position(scale, fret)
    }

    fun fret(scale: Float, fret: Float): Solid {
        cylinder(width, 1.0, 1.0)->scale(1.0, 1.4, 1.0)
            ->rotate(90.0, 90.0, 90.0)
            ->move(width/2.0, 2.5,  fret_position(scale, fret) - length/2.0 - bridge_to_neck)
    }

    fun nut(width: Float, height: Float, thickness: Float): Solid {
       let sslot = notch->rotate(180.0, 0.0, 90.0)->forward(150.0)->down(10.0)
        let large = cuboid(width, thickness/2.0, 1.0)
        let small = cuboid(width, thickness/4.0, 1.0)->move(0.0, -thickness/8.0, height)
        let full = large + small
        let slot =  cylinder(thickness, 1.0, 1.0)->rotate(0.0, 90.0, 90.0)->move(0.0, 200.0, height)
        let string_sep = width / 4.0
        let edge = string_sep / 2.0
        full->hull()->move(0.0, 200.0, 0.0)
         - sslot->move(-width/2.0 + edge, 0.0, 18.0)
         - sslot->move(-width/2.0 + edge + string_sep, 0.0, 18.0)
         - sslot->move(-width/2.0 + edge + 2.0 *  string_sep, 0.0, 18.0)
         - sslot->move(-width/2.0 + edge + 3.0 *  string_sep, 0.0, 18.0)
    }

    fun dotpos(fret: Int): Float {
        let below = fret_position(scale_length, (fret - 1)->float())
        let above = fret_position(scale_length, fret->float())
        0.5 * (above + below) - length/2.0 - bridge_to_neck
    }

    fun single_dot(fret: Int): Solid {
        dot->move(0.0, 1.0, dotpos(fret))
    }

    fun side_dot(fret: Int): Solid {
        cylinder(30.0, 1.75/2.0, 1.75/2.0)->rotate(0.0, -90.0, 0.0)->move(0.0, 0.0, dotpos(fret))
    }

    fun double_side_dot(fret: Int): Solid {
        let pos = dotpos(fret)
        cylinder(30.0, 1.75/2.0, 1.75/2.0)->rotate(0.0, -90.0, 0.0)->move(0.0, 0.0, pos + 2) +
        cylinder(30.0, 1.75/2.0, 1.75/2.0)->rotate(0.0, -90.0, 0.0)->move(0.0, 0.0, pos - 2)
    }

    fun double_dot(fret: Int): Solid {
        let pos = dotpos(fret)
        dot->move(-6.0, 1.0, pos) + dot->move(6.0, 1.0, pos)
    }

    let dot = cylinder(5.0, 2.0, 2.0)->rotate(90.0, 0.0, 0.0)
    let frets = union(for f in 1->to(20) {
            fret(scale_length, f)
        })
    let board = cuboid(width, 5.0, length+10.0)
        // frets
        + frets
        - union(for d in [3, 5, 7, 10] {
            single_dot(d) + side_dot(d)
        })
        - double_dot(12)
        - double_side_dot(12)
        + nut(width, 8.0, 10.0)->rotate(90.0, 0.0, 180.0)->move(0.0, -2.0, -14.6)
    board->move(0.0, 20.0, -20.0)
}

// generate an alignment peg for joining together split parts.
fun peg(diam: Float, len: Float): Solid {
    cylinder(len, diam/2.0, 0.3)->rotate(90.0, 0.0, 90.0)
}

// If the neck is split into two pieces, it's still just a little
// too large for my printers. So it's split into three sections.
let full_neck = neck(scale_length, bridge_to_neck, neck_width)->rotate(0.0, -90.0, 90.0)
let neck_split_a = full_neck->split_by_plane(v3(0.0, 1.0, 1.0), 200.0)
let neck_split_b = neck_split_a[1]->split_by_plane(v3(0.0, -1.0, 1.0), -75.0)

produce("neck-a") {
     neck_split_a[0]
   + peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(10.0, 273.0, 5.0)
   + peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(-10.0, 273.0, 5.0)
   + peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(0.0, 263.0, 15.0)
}

produce("neck-b") {
    neck_split_b[1]
   - peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(10.0, 273.0, 5.0)
   - peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(-10.0, 273.0, 5.0)
   - peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(0.0, 263.0, 15.0)
   + peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(10.0, 107.0, 5.0)
   + peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(-10.0, 107.0, 5.0)
   + peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(0.0, 117.0, 15.0)
}

produce("neck-c") {
    neck_split_b[0]
   - peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(10.0, 107.0, 5.0)
   - peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(-10.0, 107.0, 5.0)
   - peg(3.0, 6.0)->rotate(0.0, 0.0, -90.0)->move(0.0, 117.0, 15.0)
}

let full_fretboard = fretboard(scale_length - bridge_to_neck, neck_width)
let fretboard_parts = full_fretboard->split_by_plane(v3(0.0, 0.0, 1.0), 0.0)

produce("fretboard-a") {
    fretboard_parts[0] +
    peg(2.0, 3.0)->rotate(180.0, 90.0, 0.0)->move(-10.0, 20.0, -2.5) +
    peg(2.0, 3.0)->rotate(0.0, 90.0, 0.0)->move(10.0, 20.0, -2.5)
}

produce("fretboard-b") {
    fretboard_parts[1] -
    peg(2.0, 3.0)->rotate(180.0, 90.0, 0.0)->move(-10.0, 20.0, -2.5) -
    peg(2.0, 3.0)->rotate(0.0, 90.0, 0.0)->move(10.0, 20.0, -2.5)
}


let full_body = body(body_large_cylinder_radius, body_thickness)
let necked_body = full_body -
    neck(scale_length, bridge_to_neck, neck_width)->rotate(0.0, -90.0, 180.0)->move(510.0, 0.0, -80.0)

let split_body_parts = necked_body->split_by_plane(v3(-1.0, 0.0, 1.0), -16.8)
produce("body-a") {
    split_body_parts[0] +
         peg(2.0, 4.0)->move(25.0, 0.0, -2.5) +
         peg(2.0, 4.0)->move(25.0, 67.0, -2.5) +
         peg(2.0, 4.0)->move(25.0, -67.0, -2.5) +
         peg(2.0, 4.0)->move(-34.0, 88.0, -60.0) +
         peg(2.0, 4.0)->move(-34.0, -88.0, -60.0) +
         cuboid(10.0, 130.0, 2.0)->move(-40.0, 0.0, -64.5)
}


produce("body-b") {
    split_body_parts[1] -
         peg(2.0, 4.0)->move(25.0, 0.0, -2.5) -
         peg(2.0, 4.0)->move(25.0, 67.0, -2.5) -
         peg(2.0, 4.0)->move(25.0, -67.0, -2.5) -
         peg(2.0, 4.0)->move(-34.0, 88.0, -60.0) -
         peg(2.0, 4.0)->move(-34.0, -88.0, -60.0) -
         cuboid(10.0, 130.0, 2.0)->move(-40.0, 0.0, -64.5)
}

produce("assembled") {
    full_body + neck(scale_length, bridge_to_neck, neck_width)->rotate(0.0, -90.0, 180.0)->move(500.0, 0.0, -80.0)
}


fun prism(x: Float, y: Float, z: Float,
    xscale: Float, yscale: Float): Solid {
    let bottom = cuboid(x, y, 1.0)
    let top = cuboid(xscale * x, yscale * y, 1.0)->up(z)
    let result = (top + bottom)->hull()

}

fun make_bridge(width: Float, height: Float): Solid {
    let br = prism(2.0, width, height, 3.0, 1.2)


    let cutout = prism(4.0, width * 0.3, height * 0.8,
         3.0, 1.4)

    let support = prism(20.0, 2.0, 0.25*height,
         0.3, 0.3)->roty(180.0)->up(height)

    let offset = width / 5.0
    let far_left = -0.5 * width

    br - shapes::mark(5.0, 1.0)->rotx(-90.0)->rotz(90.0)->left(1.0)->up(5.0)
    - cutout->up(0.3 * height)->forward(0.25 * width)
       - cutout->up(0.3 * height)->backward(0.25 * width)+ support
       + support->forward(0.5 * width)
       + support->backward(0.5 * width)
       - notch->move(-4.0, far_left + offset,  0.0)
       - notch->move(-4.0, far_left + 2.0 * offset, 0.0)
       - notch->move(-4.0, far_left + 3.0 * offset, 0.0)
       - notch->move(-4.0, far_left + 4.0  * offset, 0.0)

}


produce("bridge") {
  make_bridge(neck_width*1.4, 30.0)->down(30.0)
}

let dot = cylinder(2, 2, 2)->left(20.0)

produce("fretboard_dots") {
  dot
  dot->forward(10.0)
  dot->forward(20.0)
  dot->forward(30.0)
  dot->forward(40.0)
  dot->forward(50.0)
  dot->forward(60.0)
}
